//
//  FFDataBits.swift
//  
//
//  Created by Hugh Bellamy on 09/11/2020.
//

import DataStream

/// [MS-DOC] 2.9.79 FFDataBits
/// The FFDataBits structure specifies the type and properties for a form field that is specified by a FFData.
public struct FFDataBits {
    public let iType: FormFieldType
    public let iRes: UInt8
    public let fOwnHelp: Bool
    public let fOwnStat: Bool
    public let fProt: Bool
    public let iSize: Bool
    public let iTypeTxt: TextboxType
    public let fRecalc: Bool
    public let fHasListBox: Bool
    
    public init(dataStream: inout DataStream) throws {
        var flags: BitFieldReader<UInt16> = try dataStream.readBits(endianess: .littleEndian)
        
        /// A - iType (2 bits): An unsigned integer that specifies the type of the form field. This value MUST be one of the following.
        let iTypeRaw = UInt8(flags.readBits(count: 2))
        guard let iType = FormFieldType(rawValue: iTypeRaw) else {
            throw OfficeFileError.corrupted
        }
        
        self.iType = iType
        
        /// iRes (5 bits): An unsigned integer. If iType is iTypeText (0), then iRes MUST be 0. If iType is iTypeChck (1), iRes specifies the state of the
        /// checkbox and MUST be 0 (unchecked), 1 (checked), or 25 (undefined). Undefined checkboxes are treated as unchecked. If iType is
        /// iTypeDrop (2), iRes specifies the current selected list box item. A value of 25 specifies the selection is undefined. Otherwise, iRes is
        /// a zero-based index into FFData.hsttbDropList.
        let iRes = UInt8(flags.readBits(count: 5))
        if self.iType == .text && iRes != 0 {
            throw OfficeFileError.corrupted
        } else if self.iType == .chck && iRes != 0 && iRes != 1 && iRes != 25 {
            throw OfficeFileError.corrupted
        }
        
        self.iRes = iRes
        
        /// B - fOwnHelp (1 bit): A bit that specifies whether the form field has custom help text in FFData.xstzHelpText. If fOwnHelp is 0,
        /// FFData.xstzHelpText contains an empty or autogenerated string.
        self.fOwnHelp = flags.readBit()
        
        /// C - fOwnStat (1 bit): A bit that specifies whether the form field has custom status bar text in FFData.xstzStatText. If fOwnStat is 0,
        /// FFData.xstzStatText contains an empty or autogenerated string.
        self.fOwnStat = flags.readBit()
        
        /// D - fProt (1 bit): A bit that specifies whether the form field is protected and its value cannot be changed.
        self.fProt = flags.readBit()
        
        /// E - iSize (1 bit): A bit that specifies whether the size of a checkbox is automatically determined by the text size where the checkbox
        /// is located. This value MUST be 0 if iType is not iTypeChck (1).
        self.iSize = flags.readBit()
        
        /// F - iTypeTxt (3 bits): An unsigned integer that specifies the type of the textbox. This MUST be one of the following values.
        /// If iType is not iTypeText (0), iTypeTxt MUST be 0 and MUST be ignored.
        let iTypeTxtRaw = UInt8(flags.readBits(count: 3))
        guard let iTypeTxt = TextboxType(rawValue: iTypeTxtRaw) else {
            throw OfficeFileError.corrupted
        }
        
        self.iTypeTxt = iTypeTxt
        
        /// G - fRecalc (1 bit): A bit that specifies whether the value of the field is automatically calculated after the field is modified.
        self.fRecalc = flags.readBit()
        
        /// H - fHasListBox (1 bit): A bit that specifies that the form field has a list box. This value MUST be 1 if iType is iTypeDrop (2). Otherwise,
        /// this value MUST be 0.
        self.fHasListBox = flags.readBit()
    }
    
    /// A - iType (2 bits): An unsigned integer that specifies the type of the form field. This value MUST be one of the following.
    public enum FormFieldType: UInt8 {
        /// 0 iTypeText Specifies that the form field is a textbox.
        case text = 0
        
        /// 1 iTypeChck Specifies that the form field is a checkbox.
        case chck = 1
        
        /// 2 iTypeDrop Specifies that the form field is a dropdown list box.
        case drop = 2
    }
    
    /// F - iTypeTxt (3 bits): An unsigned integer that specifies the type of the textbox. This MUST be one of the following values.
    /// If iType is not iTypeText (0), iTypeTxt MUST be 0 and MUST be ignored.
    public enum TextboxType: UInt8 {
        /// 0 iTypeTxtReg Specifies that the textbox value is regular text.
        case reg = 0
        
        /// 1 iTypeTxtNum Specifies that the textbox value is a number.
        case num = 1
        
        /// 2 iTypeTxtDate Specifies that the textbox value is a date or time.
        case date = 2
        
        /// 3 iTypeTxtCurDate Specifies that the textbox value is the current date.
        case curDate = 3
        
        /// 4 iTypeTxtCurTime Specifies that the textbox value is the current time.
        case curTime = 4
        
        /// 5 iTypeTxtCalc Specifies that the textbox value is calculated from an expression. The expression is given by FFData.xstzTextDef.
        case calc = 5
    }
}
