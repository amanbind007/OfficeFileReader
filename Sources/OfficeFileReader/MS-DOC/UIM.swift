//
//  UIM.swift
//  
//
//  Created by Hugh Bellamy on 09/11/2020.
//

import DataStream

/// [MS-DOC] 2.9.335 UIM
/// The UIM structure contains data that was provided by the Microsoft Windows Text Services Framework, a service provided by Microsoft Windows
/// that enables the application to receive input from different input sources, such as handwriting.
public struct UIM {
    public let iguidType: Int16
    public let iclsidTip: Int16
    public let fc: Int32
    public let cch: Int32
    public let cb: UInt32
    public let dwPrivate: UInt32
    
    public init(dataStream: inout DataStream) throws {
        /// iguidType (2 bytes): A signed integer value that specifies an index into the GUIDs that are listed in PlfguidUim.rgguidUim. This value
        /// MUST be greater than or equal to 0 and less than PlfguidUim.iMac. The referenced GUID specifies the Text Services category of the
        /// service that provided this data.
        self.iguidType = try dataStream.read(endianess: .littleEndian)
        if self.iguidType < 0 {
            throw OfficeFileError.corrupted
        }
        
        /// iclsidTip (2 bytes): A signed integer value that specifies an index into the GUIDs that are listed in PlfguidUim.rgguidUim. This value MUST
        /// be greater than or equal to 0 and less than PlfguidUim.iMac. The referenced GUID specifies the CLSID of the service that provided this data.
        self.iclsidTip = try dataStream.read(endianess: .littleEndian)
        if self.iclsidTip < 0 {
            throw OfficeFileError.corrupted
        }

        /// fc (4 bytes): A signed integer that specifies an offset into the Table Stream. The data that is provided by the service which is
        /// identified by iguidType and iclsidTip begins at this offset. The size of this data, in bytes, is specified by cb. The meaning of this data is
        /// determined by the service that provided it.
        self.fc = try dataStream.read(endianess: .littleEndian)
        
        /// cch (4 bytes): A signed integer that specifies the size of text, in count of characters, which starts at the corresponding CP in the
        /// plcfUim value of the main document.
        self.cch = try dataStream.read(endianess: .littleEndian)
        
        /// cb (4 bytes): An unsigned integer that specifies the size, in bytes, of the data at offset fc in the Table Stream.
        self.cb = try dataStream.read(endianess: .littleEndian)
        
        /// dwPrivate (4 bytes): An unsigned integer that specifies the private data that is generated by the service which is identified by iguidType
        /// and iclsidTip.
        self.dwPrivate = try dataStream.read(endianess: .littleEndian)
    }
}
